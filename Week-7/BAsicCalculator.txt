#include <mpi.h>
#include <stdio.h>

int main(int argc, char** argv) {

    int rank, size;
    int a, b, result;

    MPI_Init(&argc, &argv);

    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    if (rank == 0) {
        printf("Enter the value of a: \n");
        scanf_s("%d", &a);
        printf("Enter the value of b: \n");
        scanf_s("%d", &b);
    }

    MPI_Bcast(&a, 1, MPI_INT, 0, MPI_COMM_WORLD);
    MPI_Bcast(&b, 1, MPI_INT, 0, MPI_COMM_WORLD);

    if (rank % 4 == 0) {
        result = a + b;
        printf("%d + %d = %d by process %d\n", a, b, result, rank);
    }
    else if (rank % 4 == 1) {
        result = a - b;
        printf("%d - %d = %d by process %d\n", a, b, result, rank);
    }
    else if (rank % 4 == 2) {
        result = a * b;
        printf("%d * %d = %d by process %d\n", a, b, result, rank);
    }
    else {
        result = a / b;
        printf("%d / %d = %d by process %d\n", a, b, result, rank);
    }

    MPI_Finalize();

    return 0;
}







#include <stdio.h>
#include <stdlib.h>
#include "mpi.h"

int main(int argc, char** argv) {
    MPI_Init(&argc, &argv);

    int rank, size, num1, num2, result;
    char op;

    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    if (rank == 0) {
        printf("Enter the first number: ");
        scanf_s("%d", &num1);
        printf("Enter the second number: ");
        scanf_s("%d", &num2);
        printf("Enter the operation (+,-,*,/): ");
        scanf_s(" %c", &op);
    }

    MPI_Bcast(&num1, 1, MPI_INT, 0, MPI_COMM_WORLD);
    MPI_Bcast(&num2, 1, MPI_INT, 0, MPI_COMM_WORLD);
    MPI_Bcast(&op, 1, MPI_CHAR, 0, MPI_COMM_WORLD);

    switch (op) {
    case '+':
        result = num1 + num2;
        break;
    case '-':
        result = num1 - num2;
        break;
    case '*':
        result = num1 * num2;
        break;
    case '/':
        result = num1 / num2;
        break;
    default:
        if (rank == 0) printf("Invalid operation\n");
        MPI_Finalize();
        return 0;
    }

    if (rank == 0) {
        printf("Result: %d\n", result);
    }

    MPI_Finalize();
    return 0;
}
